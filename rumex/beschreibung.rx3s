% Beschreibung des Rumex Baukastens
% 
% 

<!--

# Beschreibung des Rumex Baukastens

-->

...der mit `pandocs markdown`, `bash`, `make` `imagamagick` und `perl` 
eine Home Page erstellt die auch auf <http://github.com> verwendet
werden kann.

<!-- schnipp -->



# Vorwort

Die Beweggründe mit einem eigenen System eine Internet Seite 
zu Verwalten sind mit der Zeit in mir gewachsen.

Es gibt immer mehr Systeme die zum Erstellen und Verwalten 
von Internetseiten eingesetzt werden.
Probiert habe ich schon viele und mit den meisten war ich 
auch sehr zufrieden, wenn da nicht immer der Hacken mit 
dem Updates wäre. 
Irgendwie, zumindest kommt es mir so vor, ist der Aufwand das 
System der Seite auf dem aktuellen Stand zu halten größer 
geworden als den Inhalt der eigentlichen Seite zu pflegen.

Ich wünschte mir wieder eine Internetseite wie in früheren Zeiten.
Eine Seite die aus einfachen HTML Seiten besteht.

Irgendwann bin ich dann auf `markdown` und `pandoc` gestoßen 
und die Idee dieses Home Page Baukastens ist entstanden.


## Rumex?

Rumex ist die lateinische Bezeichnung für den [Ampfer](http://de.wikipedia.org/wiki/Ampfer) und 
dieser taucht in der Natur dann auf, wenn der Boden Überdüngt, Verdichtung und Beschädigt ist.
Rumex gehört zu den sogenannten Pionier Pflanzen. Er ist ein Lückenfüller.

Genau das soll Rumex auch sein "ein Lückenfüller" für alle die ... Systeme satt haben.





# Installation

@todo

Rumex wurde erstellt um die Seite auf [github.com](http://github.com) 
zu betreiben.

Es funktioniert aber auch auf einen normalen Server.
Einfach die HTML Dateien und die Verzeichnisse `bilder` und
`template`,per FTP, auf den Server kopieren.

Sind ein paar Voraussetzungen erfüllt kann man rumex auch
über git, wie bei github.com, auf dem einen normalen Server 
betreiben.

Ein Beispiel findet man auf [rumex.it-bayer.de](http://rumex.it-bayer.de).

## Installation auf dem github.com Server

- Einrichten eines github.com Zugangs
- Arbeits- Repository auf den AP[^ap] holen
- Die Rumex ZIP Datei
- Die Dateien des ZIP Archives in das Arbeits- Repository kopieren
- Grund Dateien anpassen 
	- @fixme: Angabe welche Dateien fehlt noch
- Erste Änderungen vornehme
- `make online` - Fertig.

[^ap]: Mit AP ist der **A**rbeits**P**latz Rechner gemeint.



## Installation auf einen nicht github.com Server

Auf der Seite [rumex.it-bayer.de](http://rumex.it-bayer.de) findet man
eine Beschreibung wie man den rumex Baukasten auf einen **nicht** 
`github.com` Server installiert.


## Einrichten der Seite

ZIP Datei holen
	
	wget https://github.com/itbayer/rumex/archive/gh-pages.zip

und entpacken

	unzip gh-pages.zip

Verzeichnis umbenennen

	mv rumex-gh-pages/ neue_seite

In das neue Verzeichnis wechseln

	cd neue_seite

...und aufräumen @todo `make clean`

	rm *.html *.xml

in das `rumex` Verzeichnis wechseln

	cd rumex

alle `rx??` Dateien löschen die nicht gebraucht werden

	rm beschreibung.rx3s
	rm github.rx0	
	rm historie.rx0s
	rm index.rx0x
	rm ohnevorspann.rx0v
	rm sandkasten.rx6v
	rm sitemap.rx0v
	rm todo.rx1v
	rm versteckt.rx0v
	rm weiterleitung.rx0w
	
`impressum.rx0x`, `rss.rx0x`,  `start.rx0s` anpassen

`make all` ausführen 
und neue Seite ansehen `x-www-browser ../index.html&`

@todo: Vorlage der Seiten impressum, rss, start erstellen
Verzeichnis template. make install Befehl bauen.

	rm rx*, cp template/rx_vorlagen/* ., 


<!-- Notizen

- Holen der ZIP Datei und entpacken `/tmp`
- Verzeichnis für die HP erstellen

### Grund Gerüste bauen

Kopieren der Dateien 

- Die Datei `robots.txt`
- Die Datei `readme.md` (github Installation)

Kopieren der Verzeichnisse 
- `rumex/`
- `bin/`
- `template/`

Erstellen des Verzeichnisses `bilder`

## Anpassung

readme.md
:	Nur bei github Installation erforderlich

robots.txt
:	Anpassen der `sitemap.xml`
	
		Sitemap: http://www.meine_seite.tdl/sitemap.xml


template/config.makefile
:	In dieser Datei befinden sich die Einstellungen für die make
	Verarbeitung.
	Die Wichtigsten Einstellungen sind:
	
	**Überschrift der Startseite**
		
		# ##############################################################
		# Überschriften für die Index Seite
		U1="Meine neue Seite" 
		U2="Kanu Fahrt 2013"
		U3="Hans Dampf"
	
	**Überschrift des RSS Feed**
	
		RSS_TITLE = "Kanu Fahrt 2013 - Hans Dampf"
	
	

template/fuss.html
:	In dieser Datei muss die Copyright Zeile anpassen.
	Eine codierte E-Mail Angabe bekommt man wenn,
	man sich später eine Seite mit E-Mail erstellt und
	den Quellcode aus dieser Seite kopiert.
	Für den Anfang einfach einen HTML Quelltext verwenden
	oder weglassen.

-->



# Aufbau des rumex Baukastens

## root Verzeichnis

Im `root` Verzeichnis findet man alle `HTML` Dateien
der Seite. Diese werde vom Baukasten erstellt und
müssen nicht von Hand verändert werden.
Zusätzlich findet man noch ein folgende Systemdateien:

rss.xml 
:	News Feed Datei, wird vom System erstelle

readme.md 
:	Beschreibungsdatei die von github.com gebraucht wird

robots.txt 
:	Datei für die Suchmaschinen

favicon.ico
:	Icon für den Browser

.htaccess
:	Konfiguration für den Apache Server

CNAME
:	@fixme
	

## Unterverzeichnisse


template/
:	Im `template` Verzeichnis liegen alle Dateien die von den
	verschiedenen Tools eingebunden werden.
	Auch Konfigurationsdateien sind hier zu finden.

bin/
:	Hier liegen die Skripte die zur Erstellung der
	Seiten dienen.

rumex/
:	Hier befinden sich alle Texte der Seite.

bilder/
:	In diesem Verzeichnis werden alle Bilder der Seite abgelegt.



## Steuerung durch Dateiendung

Das Aussehen der Dateien bezüglich des Inhaltsverzeichnisses könnte auch durch die Dateiendung gesteuert werden.

### Beispiel

datei.rx0s
:	Würde eine HTML Datei ohne Inhaltsverzeichnis erstellen.

datei.rx1s
:	Erstellt die HTML Datei mit dem Inhaltsverzeichnis aus den Einträgen
	der H1 Überschriften.

datei.rx2s
:	Erstellt eine HTML Datei mit dem Inhaltsverzeichnis aud den Einträgen
	der H1 und H2 Überschriften.

Zusätzlich könnte die Dateiendung auch eine unterschiedliche Verwendung der Dateien ermöglichen.

datei.rx0s, datei.rx1s ...
:	Standard Datei.

datei.rx0x, datei.rx1x ...
:	Datei die nicht in die Liste auf `index.html` eingebunden wird.

datei.rx0v, datie.rx1v ...
:	Versteckte Datei. Diese taucht weder in der `index.html` noch 
	in der `sitemap.xml` auf.

datei.rx0w
:	Datei mit einer Weiterleitung.
	Die Weiterleitung wird dabei mittels `javascript`
	realisiert, da github keine `.htaccess` Weiterleitung
	unterstützt.

		% Weiterleitung nach beschreibung.html
		%
		%
		
		<script language="javascript">
		<!--
		window.location.href="beschreibung.html";
		// -->
		</script> 

Bei der Änderung der Dateiendung bleibt der eigentliche `html` Name
gleich. Nur die Funktion der Einbindung ändert sich.


## Sonderseiten

Im Verzeichnis `pandoc` befinden sich Sonderseiten.

rumex/index.rx0x
:	Diese Datei wird vom Programm `bin/make_index.pl` erstellt,
	muss somit nicht vorhanden sein.

rumex/start.rx0s
:	Die `start.rx0s` wird als Vortext in die `index.rx0x` eingebunden.
	Mit ihr kann man oberhalb der Seiten Liste einen 
	extra Text in die `index.html` eingebunden werden. \
	**Diese Datei ist erforderlich und muss vorhanden sein.**

rumex/rss.rx0x
:	Datei für die RSS Feed Funktion. 

rumex/impressum.rx0x
:	Datei für die Impressumsangaben. \
	**Ist nicht zwingend erforderlich. Jedoch muss die `inc/fuss.html`
	entsprechende bearbeitet, der Link muss raus genommen, werden.**

rumex/Makefile
:	Sie `make` Steuerdatei.

## Aufbau der Startseite

Die Startseite `markdown/start.rx0s` muss vorhanden sein.
Es reicht auch ein `touch markdown/start.rx0s.

Der normale Aufbau könnte so ausschauen. Die `pandoc` 
Kopfzeile sind nicht zwingend erforderlich.

~~~
% start.rx0s
%
%

Hier kommt auch schon der Vortext für die index.html
~~~

## Aufbau der Einzelseiten

Die Einzelseiten liegen alle im Verzeichnis `rumex` und zwar in 
der Sprache `markdown` bzw. der Erweiterung von `pandoc`.

Diese Einzelseiten werden in chronologischer Reihenfolge in die Startseite
`index.html` eingebunden und bilden sozusagen das Inhaltsverzeichnis
der Seite.
In jeder Einzelseite wird dazu ein sogenannter *"Vortext"* hinterlegt.
Die Seite bzw. der Kopf der Seite hat dabei folgenden Aufbau.

~~~
% Seiten Überschrift 1
% Seiten Überschrift 2
% Seiten Überschrift 3

<!--

# Listen-Überschrift

Überschrift und Text der in der Listenübersicht
auf index.html angezeigt wird.

Alles was innerhalb der HTML Kommentar Marken
steht wird nur auf der index.html Seite angezeigt.

-->

Alles was sich außerhalb der HTML Marken
befindet wird auch auf der eigentlichen Seite angezeigt.

Durch das Schlüsselwort "schnipp", das auch in HTML
Kommentar Marken stehen muss, wird der Vortext beendet.
Auf der index.html erscheint an dieser Stelle der Link
"... weiter lesen".

<!-- schnipp -->

Ab hier geht dann der Inhlat der eigentlichen Seite los.
~~~

## Template

Änderung gegenüber des Original `pandoc` Templates.

~~~{.diff}
5c5
<   <meta name="generator" content="pandoc">
---
>   <meta name="generator" content="pandoc rumex">
54a55
> <div id=seite>
55a57
> </div>
~~~

# RSS Feed Funktion

@todo

Wird nicht aus den einzelnen Dateien erstellt sondern 
muss manuell editiert werden, Datei `rumex/rssmd0x`.

Jede Überschrift eines Eintrags muss mit einem `{#anker}`
enden.

Danach kommen die Angaben zu:

| **Link:** _Verweis zur Seite mit weiteren Informationen_ 
| **Autor:** _Autor der den Eintrag geschrieben hat_
| **Kategorie:** _Kategoie des Eintrags_

die in HTML Kommentar Marker eingeschlossen sind.

Anschließend folgt die Meldung.
Zur Zeit werden folgende `pandoc` Formatierungen unterstützt.

* Überschriften ab der Stufe 3 `###`
* Aufzählungen `-`
* Aufzählungen `*`
* Zitate `>`
* Links `[Link](http://muster.tdl)`. Diese dürfen nicht am Anfang einer Zeile stehen.
* Bilder `![Bild](bilder/muster.png "muster.png")`, Diese dürfen nicht am Anfang einer Zeile stehen.
* Code <code>&#096;Code&#096;</code>.


## Beispiel einer RSS Feed Seite

~~~
% Abo Seite - Newsletter - RSS Feed
% 
%


<!--
| Titel: Rumex - Ein Home Page Baukasten
| Beschreibung: Aktuelles und Neuigkeiten vom rumex Home Page Baukasten
| KLink: http://www.it-bayer.de/rumex/
| Lang: de-DE
| BildTitel: IT-Bayer rumex Meldungen
| BildURL: http://www.itbayer.de/rumex/bilder/404.png
| BildLink: http://www.it-bayer.de/rumex/
| BildBeschreibung: Aktuelles und Neuigkeiten von der rumex Seite.
-->




# rumex bekommt die RSS Feed Funktion{#rssfeed}

<!-- 
| Link: http://www.it-bayer.de/rumex/
| Autor: IT-Bayer
| Kategorie: Neues
-->

In den rumex Baukasten wurde eine RSS Feed Funktion eingebaut.
Die Einträge werden dabei auch aus einem `pandoc` Dokument gelesen
und nach `rss.xml` geschrieben.

Zusätzlich ist diese Datei auch als `rss.html` unter 
<http://www.it-bayer.de/rumex/rss.html> verfügbar.


~~~

# Steuerung

Gesteuert wird der Baukasten mittels `make` im Unterverzeichnis `rumex`.
Folgende `make` Befehle stehen dabei zur Verfügung.

make html
:	Erstellt die einzelnen html Dateien. 
	Hier kann auch nur `make` verwendet werden.

make index
:	Erstellt die `index.md` Datei aus der dann
	die `index.html` Datei erstellt wird.

make all
:	Eine Zusammenstellung aus `make index` und `make html`.

make online
:	Daten auf github hoch laden.

make bilder
:	Erstellt Bilder in verschiedenen Auflösungen.
	

# Einrichten einer neue Seite

@todo

# Installation

Der Baukasten verwendet folgende Programme:

- bash
- make
- perl
- git
- pandoc
- imagemagick
- texlive

Wobei `bash`, `make` und `perl` bei jeder `*nix` Installation bereits vorhanden sein dürft.
Die restlichen Programme müssen nach installiert werden.
`texlive` wird nur gebraucht wenn man auch PDF Dateien erstellen möchte.


# Update

@todo

<!-- vim: set ft=pandoc: -->
