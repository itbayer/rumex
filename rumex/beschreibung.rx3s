% Beschreibung des Rumex Baukastens
% 
% 

<!--

# Beschreibung des Rumex Baukastens

-->

...der mit `pandocs markdown`, `bash`, `make` `imagamagick` und `perl` 
eine Home Page erstellt die auch auf <http://github.com> verwendet
werden kann.

<!-- schnipp -->



# Vorwort

Die Beweggründe mit einem eigenen System eine Internet Seite 
zu Verwalten sind mit der Zeit in mir gewachsen.

Es gibt immer mehr Systeme die zum Erstellen und Verwalten 
von Internetseiten eingesetzt werden.
Probiert habe ich schon viele und mit den meisten war ich 
auch sehr zufrieden, wenn da nicht immer der Hacken mit 
dem Updates wäre. 
Irgendwie, zumindest kommt es mir so vor, ist der Aufwand das 
System der Seite auf dem aktuellen Stand zu halten größer 
geworden als den Inhalt der eigentlichen Seite zu pflegen.

Ich wünschte mir wieder eine Internetseite wie in früheren Zeiten.
Eine Seite die aus einfachen HTML Seiten besteht.

Irgendwann bin ich dann auf `markdown` und `pandoc` gestoßen 
und die Idee dieses Home Page Baukastens ist entstanden.


## Rumex?

Rumex ist die lateinische Bezeichnung für den [Ampfer](http://de.wikipedia.org/wiki/Ampfer) und 
dieser taucht in der Natur dann auf, wenn der Boden Überdüngt, Verdichtung und Beschädigt ist.
Rumex gehört zu den sogenannten Pionier Pflanzen. Er ist ein Lückenfüller.

Genau das soll Rumex auch sein "ein Lückenfüller" für alle die ... Systeme satt haben.





# Installation

@todo

Rumex wurde erstellt um die Seite auf github.com zu
betreiben.

Es funktioniert aber auch auf einen normalen Server.
Einfach die HTML Dateien und die Verzeichnisse `bilder` und
`template`,per FTP, auf den Server kopieren.

Sind ein paar Voraussetzungen erfüllt kann man rumex auch
über git, wie bei github.com, auf dem einen normalen Server 
betreiben.


## Installation auf dem github.com Server

- Einrichten eines github.com Zugangs
- Arbeits- Repository auf den AP[^ap] holen
- Holen der Rumex ZIP Datei
- Die Dateien des ZIP Archives in das Arbeits- Repository kopieren
- Grund Dateien anpassen 
	- @fixme: Angabe welche Dateien fehlt noch
- Erste Änderungen vornehme
- `make online` - Fertig.

[^ap]: Mit AP ist der **A**rbeits**P**latz Rechner gemeint.



## Installation auf einen nicht github.com Server

Auf der Seite [rumex.it-bayer.de](http://rumex.it-bayer.de) findet man
eine Beschreibung wie man den rumex Baukasten auf einen **nicht** 
`github.com` Server installiert.


# Grunddaten / Aufbau des rumex Baukastens

## root Verzeichnis

Im `root` Verzeichnis findet man alle `HTML` Dateien
der Seite. Diese werde vom Baukasten erstellt und
müssen nicht von Hand verändert werden.
Zusätzlich findet man noch ein paar Systemdateien:

- rss.xml \
News Feed Datei, wird vom System erstelle

- readme.md \
Beschreibungsdatei die von github.com gebraucht wird.

- Makefile \
Steuerdatei für das Programm `make`.

- robots.txt \
Datei für die Suchmaschinen.

- favicon.ico \
Icon für den Browser.

- .htaccess \
Konfiguration für den Apache Server.
	

## Unterverzeichnisse

~~~{.text}
├── inc/
├── bin/
├── markdown/
└── bilder/
~~~


inc/
:	Im `inc` Verzeichnis liegen alle Dateien die von den
	verschiedenen Tools eingebunden werden.
	Auch Konfigurationsdateien sind hier zu finden.

bin/
:	Hier liegen die Skripte die zur Erstellung der
	Seiten dienen.

markdown/
:	Hier befinden sich alle Texte der Seite.

bilder/
:	In diesem Verzeichnis werden alle Bilder der Seite abgelegt.



## Steuerung durch Dateiendung

Das Aussehen der Dateien bezüglich des Inhaltsverzeichnisses könnte auch durch 
die Dateiendung gesteuert werden.

### Beispiel

datei.md0s
:	Würde eine HTML Datei ohne Inhaltsverzeichnis erstellen.

datei.md1s
:	Erstellt die HTML Datei mit dem Inhaltsverzeichnis aus den Einträgen
	der H1 Überschriften.

datei.md2s
:	Erstellt eine HTML Datei mit dem Inhaltsverzeichnis aud den Einträgen
	der H1 und H2 Überschriften.


**Auszug aus <http://johnmacfarlane.net/pandoc/README.html>**

~~~
--toc, --table-of-contents

Include an automatically generated table of contents 
(or, in the case of latex, context, and rst, an instruction 
to create one) in the output document. 
This option has no effect on man, docbook, slidy, 
slideous, or s5 output.

--toc-depth=NUMBER

Specify the number of section levels to include in the 
table of contents. The default is 3 (which means that 
level 1, 2, and 3 headers will be listed in the contents). 
Implies --toc.
~~~

Zusätzlich könnte die Dateiendung auch eine unterschiedliche Verwendung der Dateien ermöglichen.

datei.md0s, datei.md1s ...
:	Standard Datei.

datei.md0x, datei.md1x ...
:	Datei die nicht in die Liste auf `index.html` eingebunden wird.

datei.md0v, datie.md1v ...
:	Versteckte Datei. Diese taucht weder in der `index.html` noch 
	in der `sitemap.xml` auf.



Durch diese Variante würde der `html` Namen immer gleich bleiben, sollte er ja auch.
Nur die Verarbeitung würde sich ändern.

Die Steuerung erfolgt über `make`.



## Sonderseiten

Im Verzeichnis `markdown` befinden sich Sonderseiten.

markdown/index.md0x
:	Diese Datei wird vom Programm `bin/make_index.pl` erstellt,
	muss somit nicht vorhanden sein.

markdown/start.md0s
:	Die `start.md0s` wird als Vortext in die `index.md0x` eingebunden.
	Mit ihr kann man oberhalb der Seiten Liste einen 
	extra Text in die `index.html` eingebunden werden. \
	**Diese Datei ist erforderlich und muss vorhanden sein.**

markdown/rss.md0x
:	Datei für die RSS Feed Funktion. 

markdown/impressum.md0x
:	Datei für die Impressumsangaben. \
	**Ist nicht zwingend erforderlich. Jedoch muss die `inc/fuss.html`
	entsprechende bearbeitet, der Link muss raus genommen, werden.**

## Aufbau der Startseite

Die Startseite `markdown/start.md0s` muss nur vorhanden sein.
Es reicht also ein `touch markdown/start.md0s.

Der normale Aufbau könnte so ausschauen. Die `pandoc` 
Kopfzeile sind nicht zwingend erforderlich.

~~~
% start.md0s
%
%

Hier kommt auch schon der Vortext für die index.html
~~~

## Aufbau der Einzelseiten

Die Einzelseiten liegen alle im Verzeichnis `markdown` und zwar in 
der Sprache `markdown` bzw. der Erweiterung von `pandoc`.

Diese Einzelseiten werden in chronologischer Reihenfolge in die Startseite
`index.html` eingebunden und bilden sozusagen das Inhaltsverzeichnis
der Seite.
In jeder Einzelseite wird dazu ein sogenannter *"Vortext"* hinterlegt.
Die Seite bzw. der Kopf der Seite hat dabei folgenden Aufbau.

~~~
% Seiten Überschrift 1
% Seiten Überschrift 2
% Seiten Überschrift 3

<!--

# Listen-Überschrift

Überschrift und Text der in der Listenübersicht
auf index.html angezeigt wird.

Alles was innerhalb der HTML Kommentar Marken
steht wird nur auf der index.html Seite angezeigt.

-->

Alles was sich außerhalb der HTML Marken
befindet wird auch auf der eigentlichen Seite angezeigt.

Durch das Schlüsselwort "schnipp", das auch in HTML
Kommentar Marken stehen muss, wird der Vortext beendet.
Auf der index.html erscheint an dieser Stelle der Link
"... weiter lesen".

<!-- schnipp -->

Ab hier geht dann der Inhlat der eigentlichen Seite los.
~~~

## Template

Änderung gegenüber des Original `pandoc` Templates.

~~~{.diff}
5c5
<   <meta name="generator" content="pandoc">
---
>   <meta name="generator" content="pandoc rumex">
54a55
> <div id=seite>
55a57
> </div>
~~~

# RSS Feed Funktion

@todo

Wird nicht aus den einzelnen Dateien erstellt sondern 
muss manuell editiert werden, Datei `markdown/rssmd0x`.

Jede Überschrift eines Eintrags muss mit einem `{#anker}`
enden.

Danach kommen die Angaben zu:

| **Link:** _Verweis zur Seite mit weiteren Informationen_ 
| **Autor:** _Autor der den Eintrag geschrieben hat_
| **Kategorie:** _Kategoie des Eintrags_

die in HTML Kommentar Marker eingeschlossen sind.

Anschließend folgt die Meldung.
Zur Zeit werden folgende `pandoc` Formatierungen unterstützt.

* Überschriften ab der Stufe 3 `###`
* Aufzählungen `-`
* Aufzählungen `*`
* Zitate `>`
* Links `[Link](http://muster.tdl)`. Diese dürfen nicht am Anfang einer Zeile stehen.
* Bilder `![Bild](bilder/muster.png "muster.png")`, Diese dürfen nicht am Anfang einer Zeile stehen.
* Code <code>&#096;Code&#096;</code>.


## Beispiel einer RSS Feed Seite

~~~
% Abo Seite - Newsletter - RSS Feed
% 
%


<!--
| Titel: Rumex - Ein Home Page Baukasten
| Beschreibung: Aktuelles und Neuigkeiten vom rumex Home Page Baukasten
| KLink: http://www.it-bayer.de/rumex/
| Lang: de-DE
| BildTitel: IT-Bayer rumex Meldungen
| BildURL: http://www.itbayer.de/rumex/bilder/404.png
| BildLink: http://www.it-bayer.de/rumex/
| BildBeschreibung: Aktuelles und Neuigkeiten von der rumex Seite.
-->




# rumex bekommt die RSS Feed Funktion{#rssfeed}

<!-- 
| Link: http://www.it-bayer.de/rumex/
| Autor: IT-Bayer
| Kategorie: Neues
-->

In den rumex Baukasten wurde eine RSS Feed Funktion eingebaut.
Die Einträge werden dabei auch aus einem `pandoc` Dokument gelesen
und nach `rss.xml` geschrieben.

Zusätzlich ist diese Datei auch als `rss.html` unter 
<http://www.it-bayer.de/rumex/rss.html> verfügbar.


~~~

# Steuerung

Gesteuert wird der Baukasten mittels `make`.
Folgende make Befehle stehen dabei zur Verfügung.

`make html`
:	Erstellt die einzelnen html Dateien. 
	Hier kann auch nur `make` verwendet werden.

`make index`
:	Erstellt die `index.md` Datei aus der dann
	die `index.html` Datei erstellt wird.

`make all`
:	Eine Zusammenstellung aus `make index` und `make html`.

`make online`
:	Daten auf github hoch laden.

`make newrumex`
:	@fixme: Erstellt eine leere Seite.
	Löscht alles bis auf die Grunddaten des Baukastens.
	

# Einrichten einer neue Seite

@todo

# Installation

Der Baukasten verwendet folgende Programme:

- bash
- make
- perl
- git
- pandoc
- imagemagick
- texlive

Wobei `bash`, `make` und `perl` bei jeder `*nix` Installation bereits vorhanden sein dürft.
Die restlichen Programme müssen nach installiert werden.
`texlive` wird nur gebraucht wenn man auch PDF Dateien erstellen möchte.


# Update

@todo

<!-- vim: set ft=pandoc: -->
